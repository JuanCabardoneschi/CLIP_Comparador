"""
Motor de b√∫squeda inteligente
"""

import os
import json
from core.classification import calculate_similarity, get_catalog_embeddings

def find_similar_images(query_embedding, top_k=3, query_type=None, query_confidence=0.0):
    """
    Buscar im√°genes similares en el cat√°logo
    Retorna: lista de tuplas (filename, score) o cadena especial para categor√≠as no comercializadas
    """
    
    # Asegurar que los embeddings est√©n cargados
    from core.classification import load_catalog_embeddings, get_catalog_embeddings
    
    catalog_embeddings = get_catalog_embeddings()
    if not catalog_embeddings:
        # Intentar cargar embeddings
        if load_catalog_embeddings():
            catalog_embeddings = get_catalog_embeddings()
        else:
            print(f"‚ùå No se pudieron cargar los embeddings del cat√°logo")
            return []
    
    if query_embedding is None:
        print(f"‚ùå Query embedding es None")
        return []

    print(f"Cat√°logo tiene {len(catalog_embeddings)} embeddings")
    print(f"Categor√≠a detectada: '{query_type}' con confianza: {query_confidence}")
    
    # Importar configuraci√≥n centralizada de categor√≠as
    from config.categories import is_commercial_category, is_non_commercial_category
    
    # Si no se detect√≥ ninguna categor√≠a o confianza muy baja, usar descripci√≥n general
    if not query_type or query_confidence < 0.19:  # Bajar umbral a 19% (para capturar 18%)
        print(f"‚ùì No se detect√≥ categor√≠a clara (confianza: {query_confidence:.3f})")
        return "CATEGORIA_NO_DETECTADA"
    
    # Verificar si es una categor√≠a expl√≠citamente no comercializada
    if query_type and is_non_commercial_category(query_type):
        print(f"‚ùå Categor√≠a '{query_type}' expl√≠citamente NO comercializada por GOODY")
        return "CATEGORIA_NO_COMERCIALIZADA"
    
    # Verificar si la categor√≠a detectada est√° en nuestro cat√°logo comercializado
    if query_type and not is_commercial_category(query_type):
        print(f"‚ùå Categor√≠a '{query_type}' no comercializada por GOODY")
        return []

    print(f"‚úÖ Categor√≠a '{query_type}' es comercializada por GOODY")
    
    # Calcular similitudes visuales
    similarities = []
    category_matches = []  # Para productos de la misma categor√≠a
    
    # Determinar palabras clave de la categor√≠a detectada
    category_keywords = []
    if query_type:
        query_lower = query_type.lower()
        print(f"üîç Analizando categor√≠a detectada: '{query_lower}'")
        
        # Mapear categor√≠as a palabras clave de archivos
        if any(word in query_lower for word in ['gorro', 'gorra', 'boina', 'cap', 'hat']):
            category_keywords = ['gorro', 'gorra', 'boina']
            print(f"‚úÖ Categor√≠a GORRO/GORRA detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['delantal', 'pechera', 'mandil', 'apron']):
            category_keywords = ['delantal', 'pechera']
            print(f"‚úÖ Categor√≠a DELANTAL detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['camisa', 'shirt', 'blusa']):
            category_keywords = ['camisa']
            print(f"‚úÖ Categor√≠a CAMISA detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['casaca', 'chef']):
            category_keywords = ['casaca']
            print(f"‚úÖ Categor√≠a CASACA detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['chaqueta', 'jacket', 'campera']):
            category_keywords = ['chaqueta']
            print(f"‚úÖ Categor√≠a CHAQUETA detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['buzo', 'hoodie', 'sudadera']):
            category_keywords = ['buzo']
            print(f"‚úÖ Categor√≠a BUZO detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['chaleco', 'cardigan', 'vest']):
            category_keywords = ['chaleco', 'cardigan']
            print(f"‚úÖ Categor√≠a CHALECO/CARDIGAN detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['ambo', 'uniforme', 'scrubs']):
            category_keywords = ['ambo']
            print(f"‚úÖ Categor√≠a AMBO detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['zapato', 'zueco', 'calzado']):
            category_keywords = ['zapato', 'zueco']
            print(f"‚úÖ Categor√≠a ZAPATO/ZUECO detectada. Palabras clave: {category_keywords}")
        elif any(word in query_lower for word in ['remera', 'polo', 'camiseta']):
            category_keywords = ['remera', 'polo']
            print(f"‚úÖ Categor√≠a REMERA/POLO detectada. Palabras clave: {category_keywords}")
        else:
            print(f"‚ùå Categor√≠a NO MAPEADA: '{query_lower}'")
        
        print(f"üéØ Palabras clave finales para filtrado: {category_keywords}")

    for filename, catalog_embedding in catalog_embeddings.items():
        try:
            visual_similarity = calculate_similarity(query_embedding, catalog_embedding)
            
            # Verificar si es de la misma categor√≠a
            is_same_category = False
            if category_keywords:
                filename_lower = filename.lower()
                is_same_category = any(keyword in filename_lower for keyword in category_keywords)
                
                # Log detallado para debugging
                if is_same_category:
                    print(f"  ‚úÖ MATCH: {filename} (contiene palabras de la categor√≠a)")
                elif any(keyword in filename.lower() for keyword in ['gorro', 'gorra', 'boina']):
                    print(f"  üß¢ GORRA: {filename}: {visual_similarity:.3f} {'‚úÖ MATCH' if is_same_category else '‚ùå NO MATCH'}")
            
            # Aplicar boost de categor√≠a (aumentar similitud en 0.1 para misma categor√≠a)
            boosted_similarity = visual_similarity + (0.1 if is_same_category else 0.0)
            
            similarities.append((filename, visual_similarity, boosted_similarity, is_same_category))
                
        except Exception as e:
            print(f"Error calculando similitud con {filename}: {e}")
            continue

    print(f"Calculadas {len(similarities)} similitudes")
    
    # **FILTRO ABSOLUTO POR CATEGOR√çA PRIMERO**
    # Separar productos por categor√≠a
    same_category_products = [(f, s) for f, s, boosted_s, is_cat in similarities if is_cat]
    other_products = [(f, s) for f, s, boosted_s, is_cat in similarities if not is_cat]
    
    print(f"üéØ Productos de la categor√≠a '{query_type}': {len(same_category_products)}")
    print(f"üì¶ Otros productos: {len(other_products)}")
    
    # **REGLA ABSOLUTA: Si hay productos de la misma categor√≠a, SOLO usar esos**
    if same_category_products:
        print(f"‚úÖ FILTRO ABSOLUTO: Solo mostrando productos de la categor√≠a '{query_type}'")
        
        # Ordenar productos de la misma categor√≠a por similitud
        same_category_products.sort(key=lambda x: x[1], reverse=True)
        
        # Aplicar umbral m√≠nimo m√°s permisivo para la misma categor√≠a
        MIN_CATEGORY_SIMILARITY = 0.30  # Umbral m√°s bajo para misma categor√≠a
        filtered_similarities = [(f, s) for f, s in same_category_products if s >= MIN_CATEGORY_SIMILARITY]
        
        print(f"üîç Productos de la categor√≠a con similitud >= {MIN_CATEGORY_SIMILARITY}: {len(filtered_similarities)}")
        
        # Si a√∫n no hay suficientes, tomar todos los de la categor√≠a
        if not filtered_similarities:
            filtered_similarities = same_category_products
            print(f"‚ö†Ô∏è  Tomando todos los productos de la categor√≠a sin filtro de similitud")
            
    else:
        # Solo si NO hay productos de la misma categor√≠a, usar algoritmo est√°ndar
        print("üìä No hay productos de la misma categor√≠a, usando algoritmo est√°ndar")
        original_similarities = [(f, s) for f, s, boosted_s, is_cat in similarities]
        original_similarities.sort(key=lambda x: x[1], reverse=True)
        
        filtered_similarities = [(f, s) for f, s in original_similarities if s >= 0.60]
        if not filtered_similarities:
            filtered_similarities = [(f, s) for f, s in original_similarities if s >= 0.40]
    
    print(f"üéØ Resultados despu√©s del filtro absoluto por categor√≠a: {len(filtered_similarities)}")
    
    # Tomar los top_k resultados
    results = filtered_similarities[:top_k]
    
    print(f"Top {top_k} resultados finales: {[(f, round(s, 3)) for f, s in results]}")
    
    return results