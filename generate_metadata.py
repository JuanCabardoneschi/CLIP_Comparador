#!/usr/bin/env python3
"""
Generador Autom√°tico de Metadata para CLIP Comparador
Genera metadata inicial basada en nombres de archivos y an√°lisis CLIP
"""

import os
import json
import random
import re
from datetime import datetime, timedelta
import numpy as np

# Importar funciones del sistema principal
import sys
sys.path.append('.')

def setup_clip():
    """Configurar CLIP para an√°lisis de colores"""
    try:
        import torch
        import clip
        from PIL import Image
        
        device = "cpu"
        model, preprocess = clip.load("RN50", device=device)
        model.eval()
        
        return model, preprocess, device
    except Exception as e:
        print(f"Error configurando CLIP: {e}")
        return None, None, None

def extract_category_from_filename(filename):
    """Extraer categor√≠a del nombre del archivo"""
    filename_lower = filename.lower()
    
    # Mapeo de palabras clave a categor√≠as GOODY
    category_keywords = {
        'delantal': 'delantal',
        'ambo': 'ambo',
        'camisa': 'camisa',
        'casaca': 'casaca',
        'zueco': 'zueco',
        'gorro': 'gorro',
        'boina': 'gorro',
        'cardigan': 'cardigan',
        'buzo': 'buzo',
        'zapato': 'zapato dama',
        'chaleco': 'chaleco',
        'chaqueta': 'chaqueta'
    }
    
    # Buscar palabras clave en el nombre del archivo
    for keyword, category in category_keywords.items():
        if keyword in filename_lower:
            return category
    
    # Si no encuentra ninguna categor√≠a espec√≠fica, intentar inferir
    if 'dama' in filename_lower or 'mujer' in filename_lower:
        return 'ambo'  # Default para ropa de dama
    elif 'hombre' in filename_lower:
        return 'ambo'  # Default para ropa de hombre
    
    return 'camisa'  # Default general

def extract_product_name_from_filename(filename):
    """Extraer nombre del producto desde el nombre del archivo"""
    # Remover extensi√≥n
    name = os.path.splitext(filename)[0]
    
    # Limpiar caracteres especiales y n√∫meros al final
    name = re.sub(r'\s*\(\d+\)\.?\w*$', '', name)  # Remover (1), (2), etc.
    name = re.sub(r'\s*\d+\.?\w*$', '', name)      # Remover n√∫meros al final
    
    # Capitalizar palabras importantes
    words = name.split()
    cleaned_words = []
    
    for word in words:
        # Mantener palabras importantes en may√∫scula
        if word.upper() in ['NEW', 'SLIM', 'DRY-FIT', 'MOD', 'MODELO']:
            cleaned_words.append(word.upper())
        elif len(word) > 2:
            cleaned_words.append(word.capitalize())
        else:
            cleaned_words.append(word.lower())
    
    return ' '.join(cleaned_words)

def analyze_color_from_image(model, preprocess, device, image_path):
    """Analizar color predominante usando CLIP"""
    if not model:
        return ""
    
    try:
        from PIL import Image
        import torch
        import clip
        
        # Cargar imagen
        image = Image.open(image_path).convert('RGB')
        image_tensor = preprocess(image).unsqueeze(0).to(device)
        
        # Lista de colores para analizar
        color_prompts = [
            "a photo of black clothing",
            "a photo of white clothing", 
            "a photo of blue clothing",
            "a photo of navy blue clothing",
            "a photo of red clothing",
            "a photo of green clothing",
            "a photo of gray clothing",
            "a photo of brown clothing",
            "a photo of beige clothing",
            "a photo of yellow clothing",
            "a photo of pink clothing",
            "a photo of purple clothing"
        ]
        
        color_names = [
            "Negro", "Blanco", "Azul", "Azul Marino", "Rojo", 
            "Verde", "Gris", "Marr√≥n", "Beige", "Amarillo", 
            "Rosa", "P√∫rpura"
        ]
        
        # Tokenizar colores
        text_tokens = clip.tokenize(color_prompts).to(device)
        
        with torch.no_grad():
            # Obtener embeddings
            image_features = model.encode_image(image_tensor)
            text_features = model.encode_text(text_tokens)
            
            # Normalizar
            image_features /= image_features.norm(dim=-1, keepdim=True)
            text_features /= text_features.norm(dim=-1, keepdim=True)
            
            # Calcular similitudes
            similarities = (image_features @ text_features.T).squeeze(0)
            
            # Obtener el color m√°s probable
            best_color_idx = similarities.argmax().item()
            confidence = float(similarities[best_color_idx].item())
            
            # Solo retornar si la confianza es razonable
            if confidence > 0.2:
                return color_names[best_color_idx]
        
        return ""
        
    except Exception as e:
        print(f"Error analizando color para {image_path}: {e}")
        return ""

def infer_material_from_category_and_name(category, product_name):
    """Inferir material basado en categor√≠a y nombre del producto"""
    name_lower = product_name.lower()
    
    material_keywords = {
        'frizado': '100% Algod√≥n Frizado',
        'dry-fit': 'Poli√©ster Dry-Fit',
        'jean': 'Denim',
        'alpacuna': '60% Algod√≥n, 40% Poli√©ster',
        'polo': '100% Algod√≥n Piqu√©',
        'gabardina': 'Gabardina',
        'lycra': '95% Algod√≥n, 5% Lycra'
    }
    
    # Buscar palabras clave en el nombre
    for keyword, material in material_keywords.items():
        if keyword in name_lower:
            return material
    
    # Material por categor√≠a
    category_materials = {
        'delantal': '100% Algod√≥n',
        'ambo': '65% Poli√©ster, 35% Algod√≥n',
        'camisa': '100% Algod√≥n',
        'casaca': '65% Poli√©ster, 35% Algod√≥n',
        'zueco': 'EVA',
        'gorro': '100% Algod√≥n',
        'cardigan': '100% Algod√≥n',
        'buzo': '80% Algod√≥n, 20% Poli√©ster',
        'zapato dama': 'Cuero sint√©tico',
        'chaleco': '65% Poli√©ster, 35% Algod√≥n',
        'chaqueta': '100% Algod√≥n'
    }
    
    return category_materials.get(category, '100% Algod√≥n')

def generate_random_sizes():
    """Generar 3 talles aleatorios"""
    all_sizes = ['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL', '√önico']
    
    # Para productos √∫nicos (gorros, zuecos), usar talle √∫nico
    unique_categories = ['gorro', 'zueco', 'zapato dama']
    
    # Probabilidades para diferentes combinaciones
    common_combinations = [
        ['S', 'M', 'L'],
        ['M', 'L', 'XL'],
        ['S', 'M', 'XL'],
        ['XS', 'S', 'M'],
        ['L', 'XL', 'XXL'],
        ['M', 'L', 'XXL'],
        ['S', 'L', 'XL']
    ]
    
    return random.choice(common_combinations)

def generate_random_date():
    """Generar fecha aleatoria de los √∫ltimos 6 meses"""
    end_date = datetime.now()
    start_date = end_date - timedelta(days=180)  # 6 meses atr√°s
    
    # Generar fecha aleatoria
    random_days = random.randint(0, 180)
    random_date = start_date + timedelta(days=random_days)
    
    return random_date.strftime('%Y-%m-%d')

def get_catalog_images():
    """Obtener lista de im√°genes del cat√°logo"""
    catalog_path = 'catalogo'
    images = []
    
    if os.path.exists(catalog_path):
        for filename in os.listdir(catalog_path):
            if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                images.append(filename)
    
    return sorted(images)

def generate_metadata_for_all_images():
    """Generar metadata para todas las im√°genes del cat√°logo"""
    print("üîÑ Iniciando generaci√≥n autom√°tica de metadata...")
    
    # Configurar CLIP para an√°lisis de colores
    print("üì¶ Configurando CLIP para an√°lisis de colores...")
    model, preprocess, device = setup_clip()
    
    # Obtener im√°genes del cat√°logo
    catalog_images = get_catalog_images()
    print(f"üìÅ Encontradas {len(catalog_images)} im√°genes en el cat√°logo")
    
    # Cargar metadata existente (si existe)
    metadata_file = "metadata.json"
    try:
        with open(metadata_file, 'r', encoding='utf-8') as f:
            existing_metadata = json.load(f)
        print(f"üìã Cargada metadata existente para {len(existing_metadata)} productos")
    except FileNotFoundError:
        existing_metadata = {}
        print("üìã No se encontr√≥ metadata existente, creando desde cero")
    
    generated_metadata = {}
    
    for i, filename in enumerate(catalog_images, 1):
        print(f"\nüîç Procesando {i}/{len(catalog_images)}: {filename}")
        
        # Si ya existe metadata, conservarla
        if filename in existing_metadata:
            generated_metadata[filename] = existing_metadata[filename]
            print(f"   ‚úÖ Metadata existente conservada")
            continue
        
        try:
            # 1. Extraer categor√≠a del nombre
            category = extract_category_from_filename(filename)
            print(f"   üìÇ Categor√≠a detectada: {category}")
            
            # 2. Extraer nombre del producto
            product_name = extract_product_name_from_filename(filename)
            print(f"   üè∑Ô∏è Nombre del producto: {product_name}")
            
            # 3. Analizar color predominante
            image_path = os.path.join('catalogo', filename)
            color = analyze_color_from_image(model, preprocess, device, image_path)
            print(f"   üé® Color detectado: {color if color else 'No detectado'}")
            
            # 4. Inferir material
            material = infer_material_from_category_and_name(category, product_name)
            print(f"   üßµ Material inferido: {material}")
            
            # 5. Generar talles aleatorios
            if category in ['gorro', 'zueco', 'zapato dama']:
                sizes = ['√önico']
            else:
                sizes = generate_random_sizes()
            print(f"   üìè Talles generados: {sizes}")
            
            # 6. Generar datos aleatorios
            stock = random.randint(10, 300)
            precio = random.randint(5000, 25000)
            fecha_ingreso = generate_random_date()
            
            print(f"   üí∞ Precio: ${precio:,}")
            print(f"   üì¶ Stock: {stock}")
            print(f"   üìÖ Fecha ingreso: {fecha_ingreso}")
            
            # 7. Crear metadata completa
            metadata = {
                'nombre': product_name,
                'categoria': category,
                'tipo_prenda': product_name,  # Usar el mismo nombre como tipo
                'color': color,
                'material': material,
                'talle': sizes,
                'precio': float(precio),
                'stock': stock,
                'fecha_ingreso': fecha_ingreso,
                'notas': f'Metadata generada autom√°ticamente desde {filename}'
            }
            
            generated_metadata[filename] = metadata
            print(f"   ‚úÖ Metadata generada exitosamente")
            
        except Exception as e:
            print(f"   ‚ùå Error procesando {filename}: {e}")
            # Crear metadata b√°sica en caso de error
            generated_metadata[filename] = {
                'nombre': extract_product_name_from_filename(filename),
                'categoria': 'camisa',  # Default
                'tipo_prenda': extract_product_name_from_filename(filename),
                'color': '',
                'material': '100% Algod√≥n',
                'talle': ['M', 'L', 'XL'],
                'precio': 15000.0,
                'stock': 50,
                'fecha_ingreso': generate_random_date(),
                'notas': f'Metadata b√°sica generada por error en procesamiento de {filename}'
            }
    
    # Guardar metadata generada
    print(f"\nüíæ Guardando metadata para {len(generated_metadata)} productos...")
    try:
        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(generated_metadata, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Metadata guardada exitosamente en {metadata_file}")
        
        # Estad√≠sticas finales
        categories = {}
        total_value = 0
        total_stock = 0
        
        for data in generated_metadata.values():
            cat = data['categoria']
            categories[cat] = categories.get(cat, 0) + 1
            total_value += data['precio'] * data['stock']
            total_stock += data['stock']
        
        print(f"\nüìä ESTAD√çSTICAS FINALES:")
        print(f"   üì¶ Total productos: {len(generated_metadata)}")
        print(f"   üìÇ Categor√≠as:")
        for cat, count in sorted(categories.items()):
            print(f"      ‚Ä¢ {cat.title()}: {count} productos")
        print(f"   üí∞ Valor total inventario: ${total_value:,}")
        print(f"   üì¶ Stock total: {total_stock:,} unidades")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error guardando metadata: {e}")
        return False

if __name__ == '__main__':
    print("üöÄ Generador Autom√°tico de Metadata - CLIP Comparador")
    print("=" * 60)
    
    success = generate_metadata_for_all_images()
    
    if success:
        print(f"\nüéâ ¬°Metadata generada exitosamente!")
        print(f"üîó Ahora puedes usar el panel de administraci√≥n para revisar y editar la metadata")
        print(f"üåê Inicia sesi√≥n como 'admin' en http://127.0.0.1:5000")
    else:
        print(f"\n‚ùå Error generando metadata")
        
    print("\n" + "=" * 60)